#version 450
#pragma shader_stage(vertex)
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive : require
#extension GL_NV_mesh_shader: require

#include "ShaderStructs.glsl"

layout(local_size_x=32) in;
layout(triangles, max_vertices=64, max_primitives=126) out;


layout(std140, binding = 0) uniform ObjBuf
{
  mat4 MP;
  mat3 N;
};

layout(binding=1) readonly buffer Vertices
{
  Vertex vertices[];
};

layout(binding=2) readonly buffer Meshlets
{
	Meshlet meshletData[];
};

in taskNV Task
{
	uint meshletIndices[32];
};



layout(location = 0) out vec4 albedo[];
layout(location = 1) out vec3 normal[];
layout(location = 2) out vec2 texCoord[];

void main() {
	uint tid = gl_LocalInvocationID.x;
	uint gid = gl_WorkGroupID.x;
	uint mIx = meshletIndices[gid];
	uint vertexCount = uint(meshletData[mIx].vertexCount);
	uint triangleCount = uint(meshletData[mIx].triangleCount);

	for(uint i = tid; i<vertexCount; i+=32) {
		uint vIx = meshletData[gid].vertices[i];

		vec3 pos = vec3(vertices[vIx].px,
		                vertices[vIx].py,
						vertices[vIx].pz);
		vec3 nrm = vec3((1.0/127.0)*int(vertices[vIx].nx) - 1.0,
						(1.0/127.0)*int(vertices[vIx].ny) - 1.0,
						(1.0/127.0)*int(vertices[vIx].nz) - 1.0);
		vec4 col = vec4((1.0/255.0)*int(vertices[vIx].r),
						(1.0/255.0)*int(vertices[vIx].g),
						(1.0/255.0)*int(vertices[vIx].b),
						(1.0/255.0)*int(vertices[vIx].a));
		vec2 tex = vec2(vertices[vIx].tu,
						vertices[vIx].tv);

		normal[i] = normalize(N * nrm);
		albedo[i] = col;
		texCoord[i] = tex;
		gl_MeshVerticesNV[i].gl_Position = MP * vec4(pos, 1);
	}
	for(uint i = tid; i < 3*triangleCount; i+=32) {
		gl_PrimitiveIndicesNV[i] = uint(meshletData[gid].indices[i]);
	}
	if(tid==0) {
		gl_PrimitiveCountNV = uint(meshletData[gid].triangleCount);
	}
}
